React js interview coding question:-

import "./styles.css";
import { useState } from "react";

export default function App() {
  const [newGames, setNewGames] = useState("");
  const [day, setDay] = useState("");
  const games = ["football", "cricket", "volleyball", "hockey"];
  const weeks = [
    "sunday",
    "monday",
    "tuesday",
    "wednessday",
    "thurasday",
    "friday",
    "saturday"
  ];
  return (
    <div className="App">
      <h2>Select the game</h2>
      {games.map((val, ind) => {
        return (
          <>
            <input
              type="radio"
              value={val}
              name="test"
              onChange={(e) => setNewGames(e.target.value)}
            ></input>
            <label>{val}</label>
            <br />
          </>
        );
      })}
      <h2>Select the Day</h2>
      {weeks.map((val, ind) => {
        return (
          <>
            <input
              type="radio"
              value={val}
              name="test2"
              onChange={(e) => setDay(e.target.value)}
              ></input>
            <label>{val}</label>
            <br />
          </>
        );
      })}
      <h4>I want to play {newGames} on {day}</h4>
    </div>
  );
}

prog:-2
import React, { useState } from "react";
import "../src/styles.css";

const App = () => {
  const dayWork = [
    "wake up at 6AM",
    "Study the newsPaper",
    "doing the Yoga",
    "going to office"
  ];
  const [items, setItems] = useState(dayWork);
  const [toggle, setToggle] = useState(false);
  const [check, setCheck] = useState("");
  const handleChange = ( val, ind) => {
    setCheck(val);
    console.log(val, ind);
    setToggle(true);
  };
  const handleDelete = (itemToDelete) => {
    const updatedItems = items.filter((item) => item !== itemToDelete);
    setItems(updatedItems);
  };
  return (
    <div className="App">
      <h3>My Day's TimeTable</h3>
      <div className="line">
        {items.map((val, ind) => {
          return (
            <ul>
              <li key={ind}>
                <input
                  type="checkbox"
                  name="test"
                  value={items}
                  checked={items == val}
                  onChange={() => handleChange( val, ind)}
                />

                {val}
              </li>
              {toggle ? (
                <button onClick={() => handleDelete(val)}>Delete</button>
              ) : null}
            </ul>
          );
        })}
      </div>
    </div>
  );
};
export default App;
prog:-3

import React, { useState } from "react";

const Todo = () => {
  const [task, setTask] = useState("");
  const [allTask, setAllTask] = useState([]);

  const handleAddTask = ()=>{
   if(task !== ""){
     const newTask = {
       id:Math.floor(Math.random()*1000),
       value:task,
       isCampleted:false
     }
     setAllTask([...allTask,newTask])
   }
   setTask("");
  }
const handleDelete =(e,id)=>{
  e.preventDefault();
  setAllTask(allTask.filter(item =>item.id !==id))
}

const handleEdit = (id) => {
  setAllTask((prevTodos) =>
    prevTodos.map((todo) =>
      todo.id === id ? { ...allTask, isEditing: true } : allTask
    )
  );
};
  return (
    <div className="container">
      <input
        type="text"
        name="todo"
        value={task}
        placeholder="add your todo..."
        onChange={(e) => setTask(e.target.value)}
      />
      <button onClick={handleAddTask}>Add Task</button>
      <br/>
      {
         allTask.map((val,ind)=>{
          return(
            <div >
            <ul style={{listStyle:"none"}}>
            <li key={ind}>{val.value}</li>
            </ul>
            <button onClick={(e)=>handleDelete(e,val.id)}>delete</button>
            <button onClick={(e)=>handleEdit(e,val.id)}>Edit</button>
            </div>
          )
        })
      }
    </div>


  );
};
export default Todo;

Prog:-4

import React, { useState, useEffect } from "react";

const Pagination = () => {
  const [allData, setAllData] = useState([]);
  const [perPage,setPerePage] = useState(10);
  const [currentPage,setCurrentPage] = useState(1);
 const indexOfLastPage = currentPage * perPage;
 const indexOfFirstPage = indexOfLastPage - perPage;

 const showInPage = allData.slice(indexOfFirstPage,indexOfLastPage);

  const totalPages = Math.ceil(allData.length/10);
  const pages =[...Array(totalPages +1).keys()].slice(1)
  console.log(pages)

  const getData = async () => {
    try {
      const res = await fetch(`https://jsonplaceholder.typicode.com/todos`);
      let result = await res.json();
      setAllData(result);
    } catch (error) {
      console.log(error);
    }
  };

  useEffect(() => {
    getData();
  }, []);

  const handlePrevPage = ()=>{
    if(currentPage !== 1) setCurrentPage(currentPage -1)
  }
  const handleNextPage = ()=>{
    if(currentPage !== totalPages) setCurrentPage(currentPage +1)
  }

  return <>
  {
    showInPage && showInPage.map((val)=>{
      return(
        <div key={val.id}>
          {val.title}
        </div>
      )
    })
  }
  <h3>
  
    <button onClick={handlePrevPage}>Prev</button>
  {
    pages.map(val=>{
      return (
        <>
        <span className ={`${currentPage === val? "active": ""}`} onClick={()=>setCurrentPage(val)}>{`${val}-`}</span>
        </>
      )
    })
  }
  <button onClick={handleNextPage}>Next</button>
  </h3>
  </>;
};
export default Pagination;

Prog:uncotrolled Component
import React, { useRef } from 'react';

const MyForm = () => {
  const nameRef = useRef();
 

  const handleSubmit = (event) => {
    event.preventDefault();
    // Access form values using refs
    const formData = {
      name: nameRef.current.value,
    
    };
    // Handle form submission with the data in formData
    console.log(formData);
  };

  return (
    <form onSubmit={handleSubmit}>
      <label>
        Name:
        <input type="text" ref={nameRef} />
      </label>
    
      <button type="submit">Submit</button>
    </form>
  );
};

export default MyForm;
Prog:-form validation contolled comp
import React, { useState } from "react";

const MyForm = () => {
  const initialData = {
    email: "",
    password: ""
  };
  const [formData, setFormData] = useState(initialData);

  const [errors, setErrors] = useState({});
  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData((prevData) => ({
      ...prevData,
      [name]: value
    }));
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    const validationErrors = {};
    if (!formData.email) {
      validationErrors.email = "Email is Required!";
    } else if (!formData.password) {
      validationErrors.password = "Password is Required!";
    }

setErrors(validationErrors)
    console.log(formData)
  };
  return (
    <form onSubmit={handleSubmit}>
      <label>Email:</label>
      <input name="email" value={formData.email} onChange={handleChange} />
      {errors.email && <span style={{color:"red"}}>{errors.email}</span>}
      <br />
      <br />
      <label>Password:</label>
      <input
        name="password"
        value={formData.password}
        onChange={(e) => handleChange(e)}
      />
      {errors.password && <span style={{color:"red"}}>{errors.password}</span>}
      <br />
      <br />
      <button>Submit</button>
    </form>
  );
};

export default MyForm;

Prog-////////////////////////
import React, { useEffect, useState } from "react";

const SearchData = () => {
  const [datas, setDatas] = useState([]);
  const [searchData, setSearchData] = useState("");

  const fetchdata = async () => {
    const response = await fetch(`https://jsonplaceholder.typicode.com/users`);
    const getData = await response.json();
    setDatas(getData);
  };
  useEffect(() => {
    fetchdata();
  }, []);

  const handleSearch = (e) => {
    e.preventDefault();
    setSearchData(e.target.value);
  };
  let filterData = datas.filter((items) => {
    if (searchData === "") {
      return items;
    } else {
      return items.name.toLowerCase().includes(searchData.toLowerCase());
    }
  });

  return (
    <div>
      <h3>Search Functionality..!</h3>
      <input
        type="text"
        placeholder="search anything by name..."
        value={searchData}
        onChange={handleSearch}
      />
      {datas &&
        filterData.map((val) => {
          return (
            <ul key={val.id} style={{ listStyle: "none" }}>
              <li>{val.name}</li>
            </ul>
          );
        })}
    </div>
  );
};
export default SearchData;

//on multiple checkbox all delete functionality-------------------------------------------------------
import React, { useEffect, useState } from "react";
import axios from "axios";

const Test = () => {
  const [data, setData] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [selectedItems, setSelectedItems] = useState([]);
  const [selectAll, setSelectAll] = useState(false);

  const handleCheckboxClick = (itemId) => {
    if (selectedItems.includes(itemId)) {
      console.log("ashit");
      setSelectedItems(selectedItems.filter((id) => id !== itemId));
    } else {
      console.log("kamila");
      setSelectedItems([...selectedItems, itemId]);
    }
  };

  const handleSelectAll = () => {
    if (selectAll) {
      setSelectedItems([]);
    } else {
      const allItemIds = data.map((item) => item.id);
      setSelectedItems(allItemIds);
    }
    setSelectAll(!selectAll);
  };

  const handleDelete = () => {
    const updatedData = data.filter((item) => !selectedItems.includes(item.id));
    setData(updatedData);
    setSelectedItems([]);
    setSelectAll(false);
  };

  const getAllData = async () => {
    setLoading(true);
    setError(null);

    await axios
      .get(`https://jsonplaceholder.typicode.com/users`)
      .then((response) => {
        setData(response.data);
      })
      .catch((error) => {
        setError(error);
      })
      .finally(() => {
        setLoading(false);
      });
  };
  useEffect(() => {
    getAllData();
  }, []);
  console.log(data);
  return (
    <div>
      <div style={{ display: "flex" }}>
        <input type="checkbox" checked={selectAll} onChange={handleSelectAll} />
        <span>Select All</span>
        <button onClick={handleDelete}>Delete</button>
      </div>
      <div
        style={{
          display: "flex",
          justifyContent: "start",
          alignItems: "center",
          marginLeft: "10px",
          gap: 40
        }}
      >
        <h4 style={{ textDecoration: "underline" }}>Sl No.</h4>
        <h4 style={{ textDecoration: "underline" }}>Name</h4>
        <h4 style={{ textDecoration: "underline" }}>Email</h4>
      </div>
      {data &&
        data.map((item) => (
          <div
            key={item.id}
            style={{
              display: "flex",
              justifyContent: "start",
              alignItems: "center",
              gap: 2
            }}
          >
            <input
              type="checkbox"
              checked={selectedItems.includes(item.id)}
              onChange={() => handleCheckboxClick(item.id)}
            />
            <span> {item.id}-</span>
            <span> {item.name}-</span>
            <span> {item.email}</span>

            <button onClick={handleDelete}>Delete</button>
          </div>
        ))}
    </div>
  );
};
export default Test;


